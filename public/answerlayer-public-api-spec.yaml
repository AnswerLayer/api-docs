openapi: 3.0.3
info:
  title: AnswerLayer Public API
  description: |
    ## Conversational Analytics Platform
    The AnswerLayer API enables you to add natural language querying and business intelligence to your applications. 
    Build data-driven customer experiences where users can ask questions in plain English and get instant insights with automatically generated charts, 
    all while maintaining perfect data isolation between your customers.
    
    ### Architecture
    
    The API follows a hierarchical structure designed for embedding analytics into your product:
    
    ```
    Your Organization (API Customer)
    ├── Database Connections (Your Data Warehouse)
    ├── Semantic Layer (How Data is Understood)
    ├── Clients (Your Customers)
    │   ├── Users (Individuals using your product)
    │   ├── Answers & Chains of Answers (Auto-scoped to client data)
    │   └── Charts & Visualizations
    └── API Keys & Authentication
    ```

    ### Semantic Layer
    
    The semantic layer translates between your database schema and business concepts, enabling more accurate and 
    consistent natural language querying. It defines:
    - **Entities**: Core business objects (customers, orders, products)
    - **Relationships**: How entities connect
    - **Dimensions**: How to group and segment data
    - **Measures**: What to count or sum
    - **Metrics**: Calculated business KPIs
    - **Filters**: Common data scoping rules

    ### Privacy

    AnswerLayer is PII-aware and will never store or access any PII data. 
    It intelligently detects which columns contain sensitive data and protects them at the source, never allowing sensitive data to leave your systems.
    
    ### Use Case Example
    
    Use AnswerLayer to:
    1. Connect your data warehouse containing all client data
    2. Generate or define a semantic layer to describe your data model
    3. Register client records for each customer  
    4. Embed conversational analytics into your customer dashboard
    5. Allow each customer to ask questions about their own usage data
    
    AnswerLayer automatically ensures data isolation - each client only sees their own data.
    
    ### Authentication
    
    All API requests require authentication using API keys. Include your API key in the `Authorization` header:
    
    ```
    Authorization: Bearer YOUR_API_KEY
    ```
  
    ### Error Handling
    
    The API uses standard HTTP status codes and returns JSON error responses:
    
    ```json
    {
      "error": {
        "code": "VALIDATION_ERROR",
        "message": "Invalid client_id provided",
        "details": "Client with ID 'client_abc123' not found"
      }
    }
    ```

  version: Alpha
  contact:
    name: AnswerLayer API Support
    email: josh@getanswerlayer.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://developers.getanswerlayer.com/v1
    description: Production server

security:
  - ApiKeyAuth: []

paths:
  # Connection Management
  /connections:
    get:
      summary: List database connections
      description: List all configured database connections
      operationId: listConnections
      tags:
        - Connections
      responses:
        '200':
          description: List of connections
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectionList'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /connections/{connection_id}/analyze:
    post:
      summary: Analyze database schema
      description: |
        Analyze a database connection to understand its schema, relationships, 
        and data patterns. Used for semantic layer generation.
      operationId: analyzeSchema
      tags:
        - Connections
      parameters:
        - name: connection_id
          in: path
          required: true
          description: Database connection ID
          schema:
            type: string
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnalyzeSchemaRequest'
      responses:
        '200':
          description: Schema analysis results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaAnalysis'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /connections/{connection_id}/generate:
    post:
      summary: Generate semantic layer from schema
      description: |
        Automatically generate a semantic layer by analyzing your database schema. 
        Uses AI to identify entities, relationships, and suggest meaningful metrics based on your data structure.
      operationId: generateSemanticLayer
      tags:
        - Connections
      parameters:
        - name: connection_id
          in: path
          required: true
          description: Database connection ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateSemanticLayerRequest'
            examples:
              basic:
                summary: Basic generation
                value:
                  options:
                    auto_discover_metrics: true
                    include_common_filters: true
              with_hints:
                summary: Generation with business context
                value:
                  options:
                    auto_discover_metrics: true
                    include_common_filters: true
                    industry: "e-commerce"
                    key_metrics: ["revenue", "customer_retention"]
      responses:
        '201':
          description: Semantic layer generated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenerateSemanticLayerResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /connections/{connection_id}/pii/detect:
    post:
      summary: Detect PII in database columns
      description: |
        Analyze database columns using AI to automatically detect personally identifiable information (PII).
        This helps identify sensitive data that should be filtered from query results.
      operationId: detectPII
      tags:
        - Connections
      parameters:
        - name: connection_id
          in: path
          required: true
          description: Database connection ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PIIDetectionRequest'
      responses:
        '200':
          description: PII detection completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PIIDetectionResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /connections/{connection_id}/pii/settings:
    put:
      summary: Update PII settings for columns
      description: |
        Bulk update PII filtering settings for multiple database columns. 
        Allows overriding AI detection results or manually marking columns as PII/safe.
      operationId: updatePIISettings
      tags:
        - Connections
      parameters:
        - name: connection_id
          in: path
          required: true
          description: Database connection ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PIIBulkUpdateRequest'
      responses:
        '200':
          description: PII settings updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PIIUpdateResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /connections/{connection_id}/pii/summary:
    get:
      summary: Get PII protection summary
      description: |
        Get a summary of PII protection status for a database connection,
        including column counts and detection statistics.
      operationId: getPIISummary
      tags:
        - Connections
      parameters:
        - name: connection_id
          in: path
          required: true
          description: Database connection ID
          schema:
            type: string
      responses:
        '200':
          description: PII summary retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PIISummaryResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  # Semantic Layer - Entities
  /semantic/entities/generate:
    post:
      summary: Generate entities from schema
      description: |
        Automatically generate entities by analyzing your database schema.
        Uses AI to identify core business objects from your table structure.
      operationId: generateEntities
      tags:
        - Semantic Layer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateEntitiesRequest'
      responses:
        '200':
          description: Entities generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  entities:
                    type: array
                    items:
                      $ref: '#/components/schemas/EntityResponse'
                  suggestions:
                    type: array
                    items:
                      type: object
                      properties:
                        message:
                          type: string
                        confidence:
                          type: number
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /semantic/entities:
    post:
      summary: Create entity
      description: Create a new entity in the semantic layer
      operationId: createEntity
      tags:
        - Semantic Layer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Entity'
      responses:
        '201':
          description: Entity created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
    
    get:
      summary: List entities
      description: Retrieve all entities in the semantic layer
      operationId: listEntities
      tags:
        - Semantic Layer
      responses:
        '200':
          description: List of entities
          content:
            application/json:
              schema:
                type: object
                properties:
                  entities:
                    type: array
                    items:
                      $ref: '#/components/schemas/EntityResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /semantic/entities/{entity_id}:
    get:
      summary: Get entity
      description: Retrieve a specific entity by ID
      operationId: getEntity
      tags:
        - Semantic Layer
      parameters:
        - name: entity_id
          in: path
          required: true
          description: Entity ID
          schema:
            type: string
      responses:
        '200':
          description: Entity details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    
    put:
      summary: Update entity
      description: Update an existing entity
      operationId: updateEntity
      tags:
        - Semantic Layer
      parameters:
        - name: entity_id
          in: path
          required: true
          description: Entity ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Entity'
      responses:
        '200':
          description: Entity updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    
    delete:
      summary: Delete entity
      description: Delete an entity from the semantic layer
      operationId: deleteEntity
      tags:
        - Semantic Layer
      parameters:
        - name: entity_id
          in: path
          required: true
          description: Entity ID
          schema:
            type: string
      responses:
        '204':
          description: Entity deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  # Semantic Layer - Relationships
  /semantic/relationships/generate:
    post:
      summary: Generate relationships from schema
      description: |
        Automatically generate relationships by analyzing foreign key constraints 
        and naming patterns in your database schema.
      operationId: generateRelationships
      tags:
        - Semantic Layer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateRelationshipsRequest'
      responses:
        '200':
          description: Relationships generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  relationships:
                    type: array
                    items:
                      $ref: '#/components/schemas/RelationshipResponse'
                  suggestions:
                    type: array
                    items:
                      type: object
                      properties:
                        message:
                          type: string
                        confidence:
                          type: number
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /semantic/relationships:
    post:
      summary: Create relationship
      description: Create a new relationship between entities
      operationId: createRelationship
      tags:
        - Semantic Layer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Relationship'
      responses:
        '201':
          description: Relationship created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RelationshipResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
    
    get:
      summary: List relationships
      description: Retrieve all relationships in the semantic layer
      operationId: listRelationships
      tags:
        - Semantic Layer
      responses:
        '200':
          description: List of relationships
          content:
            application/json:
              schema:
                type: object
                properties:
                  relationships:
                    type: array
                    items:
                      $ref: '#/components/schemas/RelationshipResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /semantic/relationships/{relationship_id}:
    get:
      summary: Get relationship
      description: Retrieve a specific relationship by ID
      operationId: getRelationship
      tags:
        - Semantic Layer
      parameters:
        - name: relationship_id
          in: path
          required: true
          description: Relationship ID
          schema:
            type: string
      responses:
        '200':
          description: Relationship details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RelationshipResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    
    put:
      summary: Update relationship
      description: Update an existing relationship
      operationId: updateRelationship
      tags:
        - Semantic Layer
      parameters:
        - name: relationship_id
          in: path
          required: true
          description: Relationship ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Relationship'
      responses:
        '200':
          description: Relationship updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RelationshipResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    
    delete:
      summary: Delete relationship
      description: Delete a relationship from the semantic layer
      operationId: deleteRelationship
      tags:
        - Semantic Layer
      parameters:
        - name: relationship_id
          in: path
          required: true
          description: Relationship ID
          schema:
            type: string
      responses:
        '204':
          description: Relationship deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  # Semantic Layer - Filters
  /semantic/filters/generate:
    post:
      summary: Generate filters from schema
      description: |
        Automatically generate common filters by analyzing data patterns, 
        status columns, and temporal fields in your database.
      operationId: generateFilters
      tags:
        - Semantic Layer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateFiltersRequest'
      responses:
        '200':
          description: Filters generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  filters:
                    type: array
                    items:
                      $ref: '#/components/schemas/FilterResponse'
                  suggestions:
                    type: array
                    items:
                      type: object
                      properties:
                        message:
                          type: string
                        confidence:
                          type: number
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /semantic/filters:
    post:
      summary: Create filter
      description: Create a new filter in the semantic layer
      operationId: createFilter
      tags:
        - Semantic Layer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Filter'
      responses:
        '201':
          description: Filter created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FilterResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
    
    get:
      summary: List filters
      description: Retrieve all filters in the semantic layer
      operationId: listFilters
      tags:
        - Semantic Layer
      responses:
        '200':
          description: List of filters
          content:
            application/json:
              schema:
                type: object
                properties:
                  filters:
                    type: array
                    items:
                      $ref: '#/components/schemas/FilterResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /semantic/filters/{filter_id}:
    get:
      summary: Get filter
      description: Retrieve a specific filter by ID
      operationId: getFilter
      tags:
        - Semantic Layer
      parameters:
        - name: filter_id
          in: path
          required: true
          description: Filter ID
          schema:
            type: string
      responses:
        '200':
          description: Filter details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FilterResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    
    put:
      summary: Update filter
      description: Update an existing filter
      operationId: updateFilter
      tags:
        - Semantic Layer
      parameters:
        - name: filter_id
          in: path
          required: true
          description: Filter ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Filter'
      responses:
        '200':
          description: Filter updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FilterResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    
    delete:
      summary: Delete filter
      description: Delete a filter from the semantic layer
      operationId: deleteFilter
      tags:
        - Semantic Layer
      parameters:
        - name: filter_id
          in: path
          required: true
          description: Filter ID
          schema:
            type: string
      responses:
        '204':
          description: Filter deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  # Semantic Layer - Dimensions
  /semantic/dimensions/generate:
    post:
      summary: Generate dimensions from schema
      description: |
        Automatically generate dimensions by analyzing categorical columns,
        enumerated values, and potential grouping fields in your database.
      operationId: generateDimensions
      tags:
        - Semantic Layer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateDimensionsRequest'
      responses:
        '200':
          description: Dimensions generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  dimensions:
                    type: array
                    items:
                      $ref: '#/components/schemas/DimensionResponse'
                  suggestions:
                    type: array
                    items:
                      type: object
                      properties:
                        message:
                          type: string
                        confidence:
                          type: number
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /semantic/dimensions:
    post:
      summary: Create dimension
      description: Create a new dimension in the semantic layer
      operationId: createDimension
      tags:
        - Semantic Layer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Dimension'
      responses:
        '201':
          description: Dimension created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DimensionResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
    
    get:
      summary: List dimensions
      description: Retrieve all dimensions in the semantic layer
      operationId: listDimensions
      tags:
        - Semantic Layer
      responses:
        '200':
          description: List of dimensions
          content:
            application/json:
              schema:
                type: object
                properties:
                  dimensions:
                    type: array
                    items:
                      $ref: '#/components/schemas/DimensionResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /semantic/dimensions/{dimension_id}:
    get:
      summary: Get dimension
      description: Retrieve a specific dimension by ID
      operationId: getDimension
      tags:
        - Semantic Layer
      parameters:
        - name: dimension_id
          in: path
          required: true
          description: Dimension ID
          schema:
            type: string
      responses:
        '200':
          description: Dimension details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DimensionResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    
    put:
      summary: Update dimension
      description: Update an existing dimension
      operationId: updateDimension
      tags:
        - Semantic Layer
      parameters:
        - name: dimension_id
          in: path
          required: true
          description: Dimension ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Dimension'
      responses:
        '200':
          description: Dimension updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DimensionResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    
    delete:
      summary: Delete dimension
      description: Delete a dimension from the semantic layer
      operationId: deleteDimension
      tags:
        - Semantic Layer
      parameters:
        - name: dimension_id
          in: path
          required: true
          description: Dimension ID
          schema:
            type: string
      responses:
        '204':
          description: Dimension deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  # Semantic Layer - Measures
  /semantic/measures/generate:
    post:
      summary: Generate measures from schema
      description: |
        Automatically generate measures by analyzing numeric columns
        and identifying aggregatable fields like amounts, counts, and quantities.
      operationId: generateMeasures
      tags:
        - Semantic Layer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateMeasuresRequest'
      responses:
        '200':
          description: Measures generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  measures:
                    type: array
                    items:
                      $ref: '#/components/schemas/MeasureResponse'
                  suggestions:
                    type: array
                    items:
                      type: object
                      properties:
                        message:
                          type: string
                        confidence:
                          type: number
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /semantic/measures:
    post:
      summary: Create measure
      description: Create a new measure in the semantic layer
      operationId: createMeasure
      tags:
        - Semantic Layer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Measure'
      responses:
        '201':
          description: Measure created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MeasureResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
    
    get:
      summary: List measures
      description: Retrieve all measures in the semantic layer
      operationId: listMeasures
      tags:
        - Semantic Layer
      responses:
        '200':
          description: List of measures
          content:
            application/json:
              schema:
                type: object
                properties:
                  measures:
                    type: array
                    items:
                      $ref: '#/components/schemas/MeasureResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /semantic/measures/{measure_id}:
    get:
      summary: Get measure
      description: Retrieve a specific measure by ID
      operationId: getMeasure
      tags:
        - Semantic Layer
      parameters:
        - name: measure_id
          in: path
          required: true
          description: Measure ID
          schema:
            type: string
      responses:
        '200':
          description: Measure details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MeasureResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    
    put:
      summary: Update measure
      description: Update an existing measure
      operationId: updateMeasure
      tags:
        - Semantic Layer
      parameters:
        - name: measure_id
          in: path
          required: true
          description: Measure ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Measure'
      responses:
        '200':
          description: Measure updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MeasureResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    
    delete:
      summary: Delete measure
      description: Delete a measure from the semantic layer
      operationId: deleteMeasure
      tags:
        - Semantic Layer
      parameters:
        - name: measure_id
          in: path
          required: true
          description: Measure ID
          schema:
            type: string
      responses:
        '204':
          description: Measure deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  # Semantic Layer - Metrics
  /semantic/metrics/generate:
    post:
      summary: Generate metrics from existing measures
      description: |
        Automatically generate business metrics by combining existing measures
        and applying common business logic patterns and formulas.
      operationId: generateMetrics
      tags:
        - Semantic Layer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateMetricsRequest'
      responses:
        '200':
          description: Metrics generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  metrics:
                    type: array
                    items:
                      $ref: '#/components/schemas/MetricResponse'
                  suggestions:
                    type: array
                    items:
                      type: object
                      properties:
                        message:
                          type: string
                        confidence:
                          type: number
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /semantic/metrics:
    post:
      summary: Create metric
      description: Create a new metric in the semantic layer
      operationId: createMetric
      tags:
        - Semantic Layer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Metric'
      responses:
        '201':
          description: Metric created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetricResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
    
    get:
      summary: List metrics
      description: Retrieve all metrics in the semantic layer
      operationId: listMetrics
      tags:
        - Semantic Layer
      responses:
        '200':
          description: List of metrics
          content:
            application/json:
              schema:
                type: object
                properties:
                  metrics:
                    type: array
                    items:
                      $ref: '#/components/schemas/MetricResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /semantic/metrics/{metric_id}:
    get:
      summary: Get metric
      description: Retrieve a specific metric by ID
      operationId: getMetric
      tags:
        - Semantic Layer
      parameters:
        - name: metric_id
          in: path
          required: true
          description: Metric ID
          schema:
            type: string
      responses:
        '200':
          description: Metric details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetricResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    
    put:
      summary: Update metric
      description: Update an existing metric
      operationId: updateMetric
      tags:
        - Semantic Layer
      parameters:
        - name: metric_id
          in: path
          required: true
          description: Metric ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Metric'
      responses:
        '200':
          description: Metric updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetricResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    
    delete:
      summary: Delete metric
      description: Delete a metric from the semantic layer
      operationId: deleteMetric
      tags:
        - Semantic Layer
      parameters:
        - name: metric_id
          in: path
          required: true
          description: Metric ID
          schema:
            type: string
      responses:
        '204':
          description: Metric deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  # Admin Endpoints - Client Management
  /admin/clients:
    post:
      summary: Create new client
      description: Create a new client organization that can access analytics through your product
      operationId: createClient
      tags:
        - Admin - Client Management
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateClientRequest'
      responses:
        '201':
          description: Client created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409':
          $ref: '#/components/responses/Conflict'
    
    get:
      summary: List all clients
      description: Retrieve a paginated list of all clients in your organization
      operationId: listClients
      tags:
        - Admin - Client Management
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: limit
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            default: 20
            maximum: 100
        - name: search
          in: query
          description: Search clients by name or domain
          required: false
          schema:
            type: string
      responses:
        '200':
          description: List of clients
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientList'
        '401':
          $ref: '#/components/responses/Unauthorized'
  
  /admin/clients/{client_id}:
    get:
      summary: Get client details
      description: Retrieve detailed information about a specific client
      operationId: getClient
      tags:
        - Admin - Client Management
      parameters:
        - name: client_id
          in: path
          required: true
          description: Unique identifier for the client
          schema:
            type: string
      responses:
        '200':
          description: Client details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    
    put:
      summary: Update client
      description: Update an existing client's information
      operationId: updateClient
      tags:
        - Admin - Client Management
      parameters:
        - name: client_id
          in: path
          required: true
          description: Unique identifier for the client
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateClientRequest'
      responses:
        '200':
          description: Client updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    
    delete:
      summary: Delete client
      description: Delete a client and all associated data
      operationId: deleteClient
      tags:
        - Admin - Client Management
      parameters:
        - name: client_id
          in: path
          required: true
          description: Unique identifier for the client
          schema:
            type: string
      responses:
        '204':
          description: Client deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  # Admin Endpoints - User Management
  /admin/clients/{client_id}/users:
    post:
      summary: Create client user
      description: Create a new user for a specific client organization
      operationId: createClientUser
      tags:
        - Admin - User Management
      parameters:
        - name: client_id
          in: path
          required: true
          description: Unique identifier for the client
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateClientUserRequest'
      responses:
        '201':
          description: Client user created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientUser'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    
    get:
      summary: List client users
      description: Retrieve all users for a specific client organization
      operationId: listClientUsers
      tags:
        - Admin - User Management
      parameters:
        - name: client_id
          in: path
          required: true
          description: Unique identifier for the client
          schema:
            type: string
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: List of client users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientUserList'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /admin/clients/{client_id}/users/{user_id}:
    get:
      summary: Get client user details
      description: Retrieve detailed information about a specific client user
      operationId: getClientUser
      tags:
        - Admin - User Management
      parameters:
        - name: client_id
          in: path
          required: true
          description: Unique identifier for the client
          schema:
            type: string
        - name: user_id
          in: path
          required: true
          description: Unique identifier for the user
          schema:
            type: string
      responses:
        '200':
          description: Client user details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientUser'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    
    put:
      summary: Update client user
      description: Update an existing client user's information
      operationId: updateClientUser
      tags:
        - Admin - User Management
      parameters:
        - name: client_id
          in: path
          required: true
          description: Unique identifier for the client
          schema:
            type: string
        - name: user_id
          in: path
          required: true
          description: Unique identifier for the user
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateClientUserRequest'
      responses:
        '200':
          description: Client user updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientUser'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    
    delete:
      summary: Delete client user
      description: Delete a client user and all associated data
      operationId: deleteClientUser
      tags:
        - Admin - User Management
      parameters:
        - name: client_id
          in: path
          required: true
          description: Unique identifier for the client
          schema:
            type: string
        - name: user_id
          in: path
          required: true
          description: Unique identifier for the user
          schema:
            type: string
      responses:
        '204':
          description: Client user deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  # Answer Endpoints
  /answer:
    post:
      summary: Get answer
      description: |
        Get an answer to a natural language question. The semantic layer is automatically 
        applied to improve query accuracy and ensure proper data scoping.
      operationId: getAnswer
      tags:
        - Answers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetAnswerRequest'
            examples:
              new_answer:
                summary: Start new conversation
                value:
                  question: "Why did our costs increase last quarter?"
                  client_id: "client_123"
                  user_id: "user_456"
                  context:
                    timezone: "America/New_York"
              follow_up:
                summary: Follow-up question
                value:
                  question: "Show me the monthly breakdown for those products"
                  client_id: "client_123"
                  user_id: "user_456"
                  chain_id: "chain_789"
              with_options:
                summary: With execution options
                value:
                  question: "What's our revenue this month?"
                  client_id: "client_123"
                  user_id: "user_456"
                  options:
                    include_sql: true
                    include_semantic_trace: true
      responses:
        '201':
          description: Answer processed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Answer'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '429':
          $ref: '#/components/responses/RateLimitExceeded'

  /answer/{answer_id}/chart:
    post:
      summary: Request chart
      description: Generate a chart visualization for a specific answer
      operationId: requestChart
      tags:
        - Answers
      parameters:
        - name: answer_id
          in: path
          required: true
          description: Unique identifier for the question/answer
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestChartRequest'
      responses:
        '200':
          description: Chart generated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Chart'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /answer/{answer_id}/suggestions:
    get:
      summary: Get follow-up suggestions
      description: Retrieve suggested follow-up questions for a given answer
      operationId: getFollowUpSuggestions
      tags:
        - Answers
      parameters:
        - name: answer_id
          in: path
          required: true
          description: Unique identifier for the question/answer
          schema:
            type: string
        - name: limit
          in: query
          description: Number of suggestions to return
          required: false
          schema:
            type: integer
            default: 5
            maximum: 10
      responses:
        '200':
          description: Follow-up suggestions retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FollowUpSuggestions'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  # Chain Management
  /chains:
    get:
      summary: List chains for client user
      description: Retrieve a list of conversation chains for a specific client user
      operationId: listChains
      tags:
        - Chain Management
      parameters:
        - name: client_id
          in: query
          required: true
          description: Unique identifier for the client
          schema:
            type: string
        - name: user_id
          in: query
          required: true
          description: Unique identifier for the user
          schema:
            type: string
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: limit
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
      responses:
        '200':
          description: List of chains
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChainList'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /chains/{chain_id}:
    get:
      summary: Get chain details
      description: Retrieve detailed information about a specific chain
      operationId: getChain
      tags:
        - Chain Management
      parameters:
        - name: chain_id
          in: path
          required: true
          description: Unique identifier for the chain
          schema:
            type: string
      responses:
        '200':
          description: Chain details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Chain'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /chains/{chain_id}/answers:
    get:
      summary: List answers for chain
      description: Retrieve all answers in a specific chain
      operationId: listAnswersForChain
      tags:
        - Chain Management
      parameters:
        - name: chain_id
          in: path
          required: true
          description: Unique identifier for the chain
          schema:
            type: string
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: List of answers in the chain
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnswerList'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

components:
  securitySchemes:
    ApiKeyAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: API key authentication. Include your API key in the Authorization header as a Bearer token.

  schemas:
    # Semantic Layer Schemas
    SemanticLayerDefinition:
      type: object
      description: Complete semantic layer definition
      properties:
        entities:
          type: array
          items:
            $ref: '#/components/schemas/Entity'
        relationships:
          type: array
          items:
            $ref: '#/components/schemas/Relationship'
        filters:
          type: array
          items:
            $ref: '#/components/schemas/Filter'
        dimensions:
          type: array
          items:
            $ref: '#/components/schemas/Dimension'
        measures:
          type: array
          items:
            $ref: '#/components/schemas/Measure'
        metrics:
          type: array
          items:
            $ref: '#/components/schemas/Metric'

    Entity:
      type: object
      required:
        - name
        - source_table
        - identifier
      properties:
        name:
          type: string
          description: Business-friendly name for the entity
          example: "customer"
        source_table:
          type: string
          description: Database table name
          example: "users"
        identifier:
          type: string
          description: Primary key column
          example: "user_id"
        temporal_key:
          type: string
          description: Optional timestamp column for event entities
          example: "created_at"
        description:
          type: string
          description: Human-readable description
          example: "Customer master data"

    Relationship:
      type: object
      required:
        - name
        - from_entity
        - to_entity
        - join_keys
      properties:
        name:
          type: string
          example: "customer_placed_order"
        from_entity:
          type: string
          example: "customer"
        to_entity:
          type: string
          example: "order"
        join_keys:
          type: object
          properties:
            from:
              type: string
              example: "user_id"
            to:
              type: string
              example: "customer_id"
        cardinality:
          type: string
          enum: ["one_to_one", "one_to_many", "many_to_many"]
          example: "one_to_many"

    Filter:
      type: object
      required:
        - name
        - entity
        - condition
      properties:
        name:
          type: string
          example: "completed_orders"
        entity:
          type: string
          example: "order"
        condition:
          type: string
          description: SQL condition
          example: "status = 'completed'"
        parameters:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              type:
                type: string
                enum: ["string", "number", "date", "boolean"]
              default:
                type: string
        description:
          type: string

    Dimension:
      type: object
      required:
        - name
        - entity
        - expression
      properties:
        name:
          type: string
          example: "customer_segment"
        entity:
          type: string
          example: "customer"
        expression:
          type: string
          description: SQL expression
          example: "CASE WHEN lifetime_value > 1000 THEN 'high_value' ELSE 'standard' END"
        description:
          type: string

    Measure:
      type: object
      required:
        - name
        - expression
        - aggregation
        - entity
      properties:
        name:
          type: string
          example: "revenue"
        expression:
          type: string
          example: "SUM(order_total)"
        aggregation:
          type: string
          enum: ["sum", "count", "avg", "min", "max"]
        entity:
          type: string
          example: "order"
        default_filters:
          type: array
          items:
            type: string
          example: ["completed_orders"]
        description:
          type: string

    Metric:
      type: object
      required:
        - name
        - formula
      properties:
        name:
          type: string
          example: "average_order_value"
        formula:
          type: string
          description: Expression using measures
          example: "revenue / order_count"
        required_filters:
          type: array
          items:
            type: string
        recommended_filters:
          type: array
          items:
            type: string
        description:
          type: string
        example_questions:
          type: array
          items:
            type: string
          example: ["What's our average order value?", "How has AOV changed over time?"]

    GenerateSemanticLayerRequest:
      type: object
      properties:
        prompt:
          type: string
          description: Custom prompt to guide the AI generation process
          example: "This is an e-commerce platform. Focus on customer behavior, order patterns, and revenue metrics."
        options:
          type: object
          properties:
            auto_discover_metrics:
              type: boolean
              default: true
              description: Automatically suggest common metrics based on data patterns
            include_common_filters:
              type: boolean
              default: true
              description: Include standard time-based and status filters
            industry:
              type: string
              description: Industry context for better metric suggestions
              example: "e-commerce"
            key_metrics:
              type: array
              items:
                type: string
              description: Hint about important business metrics
              example: ["revenue", "customer_retention", "churn_rate"]
            tables:
              type: array
              items:
                type: string
              description: Specific tables to analyze (analyzes all if not specified)
              example: ["orders", "customers", "products"]

    GenerateSemanticLayerResponse:
      type: object
      properties:
        draft_id:
          type: string
          description: ID of the generated draft
          example: "draft_456"
        semantic_layer:
          $ref: '#/components/schemas/SemanticLayerDefinition'
        suggestions:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
                enum: ["metric", "dimension", "filter"]
              name:
                type: string
              reason:
                type: string
                example: "Common e-commerce metric based on your order data"
        generation_metadata:
          type: object
          properties:
            tables_analyzed:
              type: integer
            relationships_discovered:
              type: integer
            metrics_created:
              type: integer
            confidence_score:
              type: number
              description: 0-1 confidence in the generated model
              example: 0.85

    CreateSemanticLayerRequest:
      type: object
      required:
        - semantic_layer
      properties:
        semantic_layer:
          $ref: '#/components/schemas/SemanticLayerDefinition'
        validate:
          type: boolean
          default: true
          description: Validate against current database schema
        description:
          type: string
          description: Version description or change notes
          example: "Added customer segmentation dimensions"

    # Individual Module Generation Requests
    GenerateEntitiesRequest:
      type: object
      properties:
        prompt:
          type: string
          description: Custom prompt to guide entity generation
          example: "Focus on identifying customer and product entities. Consider user roles and permissions."
        connection_id:
          type: string
          description: Database connection to analyze
          example: "conn_123"
        options:
          type: object
          properties:
            tables:
              type: array
              items:
                type: string
              description: Specific tables to analyze for entities
              example: ["users", "customers", "products"]
            exclude_system_tables:
              type: boolean
              default: true
              description: Whether to exclude system/metadata tables

    GenerateRelationshipsRequest:
      type: object
      properties:
        prompt:
          type: string
          description: Custom prompt to guide relationship generation
          example: "Map the relationships between customers, orders, and products. Include many-to-many relationships through junction tables."
        connection_id:
          type: string
          description: Database connection to analyze
          example: "conn_123"
        entity_ids:
          type: array
          items:
            type: string
          description: Specific entity IDs to generate relationships for (optional)
          example: ["entity_123", "entity_456"]
        options:
          type: object
          properties:
            include_indirect_relationships:
              type: boolean
              default: false
              description: Include relationships through intermediate entities

    GenerateFiltersRequest:
      type: object
      properties:
        prompt:
          type: string
          description: Custom prompt to guide filter generation
          example: "Create filters for active/inactive records, date ranges, and user status. Focus on business-relevant segmentation."
        connection_id:
          type: string
          description: Database connection to analyze
          example: "conn_123"
        entity_ids:
          type: array
          items:
            type: string
          description: Specific entity IDs to generate filters for (optional)
          example: ["entity_123", "entity_456"]
        options:
          type: object
          properties:
            include_temporal_filters:
              type: boolean
              default: true
              description: Include time-based filters (last 30 days, current month, etc.)
            include_status_filters:
              type: boolean
              default: true
              description: Include status-based filters (active, completed, etc.)

    GenerateDimensionsRequest:
      type: object
      properties:
        prompt:
          type: string
          description: Custom prompt to guide dimension generation
          example: "Create dimensions for customer segmentation, product categories, and geographic analysis. Include calculated fields for business insights."
        connection_id:
          type: string
          description: Database connection to analyze
          example: "conn_123"
        entity_ids:
          type: array
          items:
            type: string
          description: Specific entity IDs to generate dimensions for (optional)
          example: ["entity_123", "entity_456"]
        options:
          type: object
          properties:
            include_calculated_dimensions:
              type: boolean
              default: true
              description: Include derived/calculated dimensions
            max_categorical_values:
              type: integer
              default: 50
              description: Maximum unique values for categorical dimensions

    GenerateMeasuresRequest:
      type: object
      properties:
        prompt:
          type: string
          description: Custom prompt to guide measure generation
          example: "Generate revenue, quantity, and count measures. Focus on financial and operational KPIs."
        connection_id:
          type: string
          description: Database connection to analyze
          example: "conn_123"
        entity_ids:
          type: array
          items:
            type: string
          description: Specific entity IDs to generate measures for (optional)
          example: ["entity_123", "entity_456"]
        options:
          type: object
          properties:
            include_count_measures:
              type: boolean
              default: true
              description: Include COUNT(*) measures for entities
            include_sum_measures:
              type: boolean
              default: true
              description: Include SUM measures for numeric columns
            include_avg_measures:
              type: boolean
              default: false
              description: Include AVERAGE measures for numeric columns

    GenerateMetricsRequest:
      type: object
      properties:
        prompt:
          type: string
          description: Custom prompt to guide metric generation
          example: "Create business metrics like AOV, conversion rates, and growth metrics. Focus on actionable KPIs."
        connection_id:
          type: string
          description: Database connection to analyze
          example: "conn_123"
        measure_ids:
          type: array
          items:
            type: string
          description: Specific measure IDs to use for metric generation (optional)
          example: ["measure_123", "measure_456"]
        options:
          type: object
          properties:
            industry:
              type: string
              description: Industry context for metric suggestions
              example: "e-commerce"
            include_ratio_metrics:
              type: boolean
              default: true
              description: Include ratio-based metrics (revenue per customer, etc.)
            include_growth_metrics:
              type: boolean
              default: true
              description: Include growth/trend metrics

    SemanticLayer:
      type: object
      properties:
        id:
          type: string
          example: "sl_789"
        version:
          type: integer
          example: 1
        status:
          type: string
          enum: ["draft", "active", "archived"]
          example: "active"
        semantic_layer:
          $ref: '#/components/schemas/SemanticLayerDefinition'
        validation_results:
          type: object
          properties:
            valid:
              type: boolean
            errors:
              type: array
              items:
                type: object
                properties:
                  type:
                    type: string
                    example: "invalid_reference"
                  message:
                    type: string
                    example: "Entity 'customer' references non-existent table 'users'"
                  location:
                    type: string
                    example: "entities[0].source_table"
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        created_by:
          type: string
          example: "user_admin"

    SemanticLayerList:
      type: object
      properties:
        versions:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              version:
                type: integer
              status:
                type: string
                enum: ["draft", "active", "archived"]
              description:
                type: string
              created_at:
                type: string
                format: date-time
              created_by:
                type: string
        pagination:
          $ref: '#/components/schemas/Pagination'

    # Semantic Layer Response Schemas
    EntityResponse:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the entity
          example: "entity_123"
        name:
          type: string
          description: Business-friendly name for the entity
          example: "customer"
        source_table:
          type: string
          description: Database table name
          example: "users"
        identifier:
          type: string
          description: Primary key column
          example: "user_id"
        temporal_key:
          type: string
          description: Optional timestamp column for event entities
          example: "created_at"
        description:
          type: string
          description: Human-readable description
          example: "Customer master data"
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    RelationshipResponse:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the relationship
          example: "rel_456"
        name:
          type: string
          example: "customer_placed_order"
        from_entity:
          type: string
          example: "customer"
        to_entity:
          type: string
          example: "order"
        join_keys:
          type: object
          properties:
            from:
              type: string
              example: "user_id"
            to:
              type: string
              example: "customer_id"
        cardinality:
          type: string
          enum: ["one_to_one", "one_to_many", "many_to_many"]
          example: "one_to_many"
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    FilterResponse:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the filter
          example: "filter_789"
        name:
          type: string
          example: "completed_orders"
        entity:
          type: string
          example: "order"
        condition:
          type: string
          description: SQL condition
          example: "status = 'completed'"
        parameters:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              type:
                type: string
                enum: ["string", "number", "date", "boolean"]
              default:
                type: string
        description:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    DimensionResponse:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the dimension
          example: "dim_101"
        name:
          type: string
          example: "customer_segment"
        entity:
          type: string
          example: "customer"
        expression:
          type: string
          description: SQL expression
          example: "CASE WHEN lifetime_value > 1000 THEN 'high_value' ELSE 'standard' END"
        description:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    MeasureResponse:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the measure
          example: "measure_202"
        name:
          type: string
          example: "revenue"
        expression:
          type: string
          example: "SUM(order_total)"
        aggregation:
          type: string
          enum: ["sum", "count", "avg", "min", "max"]
        entity:
          type: string
          example: "order"
        default_filters:
          type: array
          items:
            type: string
          example: ["completed_orders"]
        description:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    MetricResponse:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the metric
          example: "metric_303"
        name:
          type: string
          example: "average_order_value"
        formula:
          type: string
          description: Expression using measures
          example: "revenue / order_count"
        required_filters:
          type: array
          items:
            type: string
        recommended_filters:
          type: array
          items:
            type: string
        description:
          type: string
        example_questions:
          type: array
          items:
            type: string
          example: ["What's our average order value?", "How has AOV changed over time?"]
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    # Connection Schemas
    Connection:
      type: object
      properties:
        id:
          type: string
          example: "conn_123"
        name:
          type: string
          example: "Production Analytics DB"
        type:
          type: string
          enum: ["postgresql", "mysql", "snowflake", "bigquery", "redshift"]
          example: "postgresql"
        status:
          type: string
          enum: ["active", "inactive", "error"]
          example: "active"
        created_at:
          type: string
          format: date-time

    ConnectionList:
      type: object
      properties:
        connections:
          type: array
          items:
            $ref: '#/components/schemas/Connection'

    # PII Detection and Management Schemas
    PIIDetectionRequest:
      type: object
      required:
        - connection_id
      properties:
        connection_id:
          type: string
          description: ID of the database connection to analyze
          example: "conn_123"
        force_redetection:
          type: boolean
          default: false
          description: Force re-detection even if columns already have PII settings

    PIIDetectionResult:
      type: object
      required:
        - column_id
        - column_name
        - table_name
        - data_type
        - is_pii_detected
        - current_status
      properties:
        column_id:
          type: string
          description: ID of the database column
          example: "col_456"
        column_name:
          type: string
          description: Name of the column
          example: "email"
        table_name:
          type: string
          description: Name of the table containing the column
          example: "users"
        data_type:
          type: string
          description: Data type of the column
          example: "VARCHAR"
        is_pii_detected:
          type: boolean
          description: Whether PII was detected in this column
          example: true
        confidence:
          type: number
          format: float
          minimum: 0.0
          maximum: 1.0
          description: AI confidence score (0.0 to 1.0)
          example: 0.95
        reasoning:
          type: string
          description: AI explanation for the detection decision
          example: "Column contains email addresses which are considered PII"
        current_status:
          type: boolean
          description: Current PII filtering status
          example: false
        detection_method:
          type: string
          enum: ["ai_detected", "user_set", "user_override_safe", "user_override_pii"]
          description: Current detection method
          example: "ai_detected"

    PIIDetectionResponse:
      type: object
      required:
        - connection_id
        - total_columns
        - analyzed_count
        - pii_detected_count
        - results
        - detection_completed_at
      properties:
        connection_id:
          type: string
          description: ID of the analyzed connection
          example: "conn_123"
        total_columns:
          type: integer
          description: Total number of columns in the database
          example: 150
        analyzed_count:
          type: integer
          description: Number of columns actually analyzed by AI
          example: 150
        pii_detected_count:
          type: integer
          description: Number of columns where PII was detected
          example: 12
        results:
          type: array
          items:
            $ref: '#/components/schemas/PIIDetectionResult'
          description: Detailed results for each column
        detection_completed_at:
          type: string
          format: date-time
          description: Timestamp when detection was completed
          example: "2024-01-15T10:30:00Z"

    PIIColumnUpdate:
      type: object
      required:
        - column_id
        - is_pii_filtered
        - detection_method
      properties:
        column_id:
          type: string
          description: ID of the database column
          example: "col_456"
        is_pii_filtered:
          type: boolean
          description: Whether this column should be filtered as PII
          example: true
        detection_method:
          type: string
          enum: ["ai_detected", "user_set", "user_override_safe", "user_override_pii"]
          description: Method used to set PII status
          example: "user_override_pii"
        pii_confidence:
          type: number
          format: float
          minimum: 0.0
          maximum: 1.0
          description: AI confidence score (preserved for AI detections)
          example: 0.95
        pii_reasoning:
          type: string
          description: AI explanation for PII detection (preserved for AI detections)
          example: "Column contains email addresses which are considered PII"

    PIIBulkUpdateRequest:
      type: object
      required:
        - connection_id
        - column_updates
      properties:
        connection_id:
          type: string
          description: ID of the database connection
          example: "conn_123"
        column_updates:
          type: array
          items:
            $ref: '#/components/schemas/PIIColumnUpdate'
          description: List of column PII updates
          minItems: 1

    PIIUpdateResponse:
      type: object
      required:
        - connection_id
        - updated_columns
        - total_updated
        - updated_at
      properties:
        connection_id:
          type: string
          description: ID of the database connection
          example: "conn_123"
        updated_columns:
          type: array
          items:
            type: object
            properties:
              column_id:
                type: string
                example: "col_456"
              column_name:
                type: string
                example: "email"
              table_name:
                type: string
                example: "users"
              is_pii_filtered:
                type: boolean
                example: true
              detection_method:
                type: string
                example: "user_override_pii"
          description: Details of updated columns
        total_updated:
          type: integer
          description: Number of columns updated
          example: 5
        updated_at:
          type: string
          format: date-time
          description: Timestamp when update was completed
          example: "2024-01-15T10:35:00Z"

    PIISummaryResponse:
      type: object
      required:
        - connection_id
        - connection_name
        - total_columns
        - pii_filtered_columns
        - ai_detected_columns
        - user_set_columns
      properties:
        connection_id:
          type: string
          description: ID of the database connection
          example: "conn_123"
        connection_name:
          type: string
          description: Name of the database connection
          example: "Production Analytics DB"
        total_columns:
          type: integer
          description: Total number of columns in the connection
          example: 150
        pii_filtered_columns:
          type: integer
          description: Number of columns currently filtered as PII
          example: 12
        ai_detected_columns:
          type: integer
          description: Number of columns detected as PII by AI
          example: 10
        user_set_columns:
          type: integer
          description: Number of columns manually marked as PII by users
          example: 2
        last_detection_run:
          type: string
          format: date-time
          description: Timestamp of last PII detection run
          example: "2024-01-15T10:30:00Z"

    AnalyzeSchemaRequest:
      type: object
      properties:
        include_sample_data:
          type: boolean
          default: true
          description: Include sample values for columns
        sample_size:
          type: integer
          default: 100
          minimum: 10
          maximum: 1000
          description: Number of sample rows to analyze
        tables:
          type: array
          items:
            type: string
          description: Specific tables to analyze (all if not specified)

    SchemaAnalysis:
      type: object
      properties:
        tables:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
                example: "orders"
              columns:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    type:
                      type: string
                    is_primary_key:
                      type: boolean
                    is_foreign_key:
                      type: boolean
                    references:
                      type: string
                      example: "customers.id"
                    is_nullable:
                      type: boolean
                    sample_values:
                      type: array
                      items: {}
                    value_patterns:
                      type: object
                      properties:
                        min:
                          type: string
                        max:
                          type: string
                        unique_count:
                          type: integer
                        null_percentage:
                          type: number
                        distribution:
                          type: string
                          enum: ["uniform", "normal", "skewed_left", "skewed_right"]
              row_count:
                type: integer
              indexes:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    columns:
                      type: array
                      items:
                        type: string
                    type:
                      type: string
        recommendations:
          type: object
          properties:
            fact_tables:
              type: array
              items:
                type: string
              description: Tables that appear to be fact tables
            dimension_tables:
              type: array
              items:
                type: string
              description: Tables that appear to be dimensions
            suggested_relationships:
              type: array
              items:
                type: object
                properties:
                  from_table:
                    type: string
                  to_table:
                    type: string
                  join_key:
                    type: string
                  confidence:
                    type: number
            suggested_metrics:
              type: array
              items:
                type: object
                properties:
                  name:
                    type: string
                  based_on:
                    type: string
                    description: Column this metric is based on
                  aggregation:
                    type: string
                  reason:
                    type: string

    # Client Management Schemas
    CreateClientRequest:
      type: object
      required:
        - name
        - domain
      properties:
        name:
          type: string
          description: Display name for the client organization
          example: "Customer Analytics Dashboard"
        description:
          type: string
          description: Optional description of the client organization
          example: "Analytics dashboard for customer insights"
        domain:
          type: string
          description: Primary domain for the client organization
          example: "dashboard.acme.com"
        settings:
          type: object
          description: Client-specific configuration settings
          properties:
            max_users:
              type: integer
              description: Maximum number of users allowed for this client
              example: 100
            features:
              type: array
              items:
                type: string
              description: List of enabled features for this client
              example: ["analytics", "reporting", "charts"]

    UpdateClientRequest:
      type: object
      properties:
        name:
          type: string
          description: Display name for the client organization
        description:
          type: string
          description: Optional description of the client organization
        settings:
          type: object
          description: Client-specific configuration settings

    Client:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the client organization
          example: "client_123"
        name:
          type: string
          description: Display name for the client organization
          example: "Customer Analytics Dashboard"
        description:
          type: string
          description: Optional description of the client organization
          example: "Analytics dashboard for customer insights"
        domain:
          type: string
          description: Primary domain for the client organization
          example: "dashboard.acme.com"
        settings:
          type: object
          description: Client-specific configuration settings
        created_at:
          type: string
          format: date-time
          description: When the client organization was created
        updated_at:
          type: string
          format: date-time
          description: When the client organization was last updated
        user_count:
          type: integer
          description: Current number of users
          example: 25

    ClientList:
      type: object
      properties:
        clients:
          type: array
          items:
            $ref: '#/components/schemas/Client'
        pagination:
          $ref: '#/components/schemas/Pagination'

    # User Management Schemas
    CreateClientUserRequest:
      type: object
      required:
        - email
        - name
      properties:
        email:
          type: string
          format: email
          description: Email address for the user
          example: "john.doe@acme.com"
        name:
          type: string
          description: Full name of the user
          example: "John Doe"
        metadata:
          type: object
          description: Additional user metadata
          properties:
            department:
              type: string
              example: "Finance"
            title:
              type: string
              example: "Senior Analyst"

    UpdateClientUserRequest:
      type: object
      properties:
        name:
          type: string
          description: Full name of the user
        metadata:
          type: object
          description: Additional user metadata

    ClientUser:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the user
          example: "user_456"
        client_id:
          type: string
          description: ID of the client organization this user belongs to
          example: "client_123"
        email:
          type: string
          format: email
          description: Email address for the user
          example: "john.doe@acme.com"
        name:
          type: string
          description: Full name of the user
          example: "John Doe"
        metadata:
          type: object
          description: Additional user metadata
        created_at:
          type: string
          format: date-time
          description: When the user was created
        updated_at:
          type: string
          format: date-time
          description: When the user was last updated
        last_active:
          type: string
          format: date-time
          description: When the user was last active

    ClientUserList:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/ClientUser'
        pagination:
          $ref: '#/components/schemas/Pagination'

    # Question & Answer Schemas
    GetAnswerRequest:
      type: object
      required:
        - question
        - client_id
        - user_id
      properties:
        question:
          type: string
          description: Natural language question to ask
          example: "What were our top 5 products by revenue last quarter?"
        client_id:
          type: string
          description: ID of the client organization asking the question
          example: "client_123"
        user_id:
          type: string
          description: ID of the user asking the question
          example: "user_456"
        chain_id:
          type: string
          description: Optional chain ID for follow-up questions
          example: "chain_789"
        context:
          type: object
          description: Additional context for the question
          properties:
            timezone:
              type: string
              description: User's timezone for date calculations
              example: "America/New_York"
            fiscal_calendar:
              type: object
              properties:
                fiscal_year_start:
                  type: string
                  description: Start of fiscal year (MM-DD)
                  example: "02-01"
            page_context:
              type: object
              description: Context about where the user is in your application
        options:
          type: object
          description: Execution options
          properties:
            include_sql:
              type: boolean
              default: false
              description: Include generated SQL in response
            include_semantic_trace:
              type: boolean
              default: false
              description: Include semantic objects used
            dry_run:
              type: boolean
              default: false
              description: Generate SQL without executing
            max_rows:
              type: integer
              default: 1000
              description: Maximum rows to return

    Answer:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the answer
          example: "answer_abc123"
        chain_id:
          type: string
          description: ID of the conversation chain
          example: "chain_789"
        question:
          type: string
          description: The original question
          example: "What were our top 5 products by revenue last quarter?"
        answer:
          type: string
          description: Natural language answer
          example: "Based on your Q3 2024 data, here are the top 5 products by revenue..."
        sql_query:
          type: string
          description: SQL query that was executed (if include_sql was true)
          example: "SELECT product_name, SUM(revenue) as total_revenue FROM sales WHERE quarter = 'Q3' AND year = 2024 GROUP BY product_name ORDER BY total_revenue DESC LIMIT 5"
        data:
          type: object
          description: Raw data results
          properties:
            columns:
              type: array
              items:
                type: string
              example: ["product_name", "total_revenue"]
            rows:
              type: array
              items:
                type: array
              example: [["Widget A", 125000], ["Widget B", 98000], ["Widget C", 87000]]
        semantic_trace:
          type: object
          description: Semantic objects used (if include_semantic_trace was true)
          properties:
            metrics_used:
              type: array
              items:
                type: string
              example: ["revenue"]
            dimensions_used:
              type: array
              items:
                type: string
              example: ["product_name"]
            filters_applied:
              type: array
              items:
                type: string
              example: ["last_quarter", "completed_orders"]
            semantic_layer_version:
              type: integer
              example: 1
        metadata:
          type: object
          description: Additional metadata about the answer
          properties:
            execution_time_ms:
              type: number
              description: Query execution time in milliseconds
              example: 245
            rows_scanned:
              type: integer
              description: Number of rows scanned
              example: 50000
            cache_hit:
              type: boolean
              description: Whether results were served from cache
              example: false
        created_at:
          type: string
          format: date-time
          description: When the answer was created
        client_id:
          type: string
          description: ID of the client organization
          example: "client_123"
        user_id:
          type: string
          description: ID of the user who asked the question
          example: "user_456"

    RequestChartRequest:
      type: object
      required:
        - chart_type
      properties:
        chart_type:
          type: string
          enum: ["bar", "line", "pie", "scatter", "bubble", "auto"]
          description: Type of chart to generate
          example: "bar"
        title:
          type: string
          description: Optional title for the chart
          example: "Top Products by Revenue"
        options:
          type: object
          description: Chart-specific options
          properties:
            color_scheme:
              type: string
              description: Color scheme for the chart
              example: "default"
            show_legend:
              type: boolean
              description: Whether to show legend
              example: true

    Chart:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the chart
          example: "chart_xyz789"
        answer_id:
          type: string
          description: ID of the associated answer
          example: "answer_abc123"
        chart_type:
          type: string
          description: Type of chart
          example: "bar"
        title:
          type: string
          description: Chart title
          example: "Top Products by Revenue"
        config:
          type: object
          description: Chart configuration
          properties:
            data:
              type: object
              description: Chart data configuration
            options:
              type: object
              description: Chart display options
        created_at:
          type: string
          format: date-time
          description: When the chart was created

    FollowUpSuggestions:
      type: object
      properties:
        suggestions:
          type: array
          items:
            type: object
            properties:
              question:
                type: string
                description: Suggested follow-up question
                example: "Show me the monthly breakdown for these products"
              confidence:
                type: number
                description: Confidence score for the suggestion
                example: 0.85
              category:
                type: string
                description: Category of the suggestion
                example: "drill_down"

    # Chain Management Schemas
    Chain:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the chain
          example: "chain_789"
        client_id:
          type: string
          description: ID of the client organization
          example: "client_123"
        user_id:
          type: string
          description: ID of the user who started the chain
          example: "user_456"
        title:
          type: string
          description: Title of the conversation chain
          example: "Q3 Revenue Analysis"
        answer_count:
          type: integer
          description: Number of answers in the chain
          example: 5
        created_at:
          type: string
          format: date-time
          description: When the chain was created
        updated_at:
          type: string
          format: date-time
          description: When the chain was last updated

    ChainList:
      type: object
      properties:
        chains:
          type: array
          items:
            $ref: '#/components/schemas/Chain'
        pagination:
          $ref: '#/components/schemas/Pagination'

    AnswerList:
      type: object
      properties:
        answers:
          type: array
          items:
            $ref: '#/components/schemas/Answer'
        pagination:
          $ref: '#/components/schemas/Pagination'

    # Common Schemas
    Pagination:
      type: object
      properties:
        page:
          type: integer
          description: Current page number
          example: 1
        limit:
          type: integer
          description: Number of items per page
          example: 20
        total:
          type: integer
          description: Total number of items
          example: 150
        total_pages:
          type: integer
          description: Total number of pages
          example: 8
        has_next:
          type: boolean
          description: Whether there are more pages
          example: true
        has_previous:
          type: boolean
          description: Whether there are previous pages
          example: false

    Error:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: string
              description: Error code
              example: "VALIDATION_ERROR"
            message:
              type: string
              description: Human-readable error message
              example: "Invalid client_id provided"
            details:
              type: string
              description: Additional error details
              example: "Client with ID 'abc123' not found"
            request_id:
              type: string
              description: Unique request identifier for debugging
              example: "req_123456789"

  responses:
    BadRequest:
      description: Bad request - Invalid input parameters
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error:
              code: "VALIDATION_ERROR"
              message: "Invalid input parameters"
              details: "The 'client_id' field is required"

    Unauthorized:
      description: Unauthorized - Invalid or missing API key
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error:
              code: "UNAUTHORIZED"
              message: "Invalid API key"
              details: "Please provide a valid API key in the Authorization header"

    Forbidden:
      description: Forbidden - Insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error:
              code: "FORBIDDEN"
              message: "Insufficient permissions"
              details: "You don't have permission to access this resource"

    NotFound:
      description: Not found - Resource doesn't exist
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error:
              code: "NOT_FOUND"
              message: "Resource not found"
              details: "The requested resource could not be found"

    Conflict:
      description: Conflict - Resource already exists
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error:
              code: "CONFLICT"
              message: "Resource already exists"
              details: "A client with this domain already exists"

    RateLimitExceeded:
      description: Rate limit exceeded
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error:
              code: "RATE_LIMIT_EXCEEDED"
              message: "Rate limit exceeded"
              details: "You have exceeded the rate limit. Please try again later"

tags:
  - name: Connections
    description: Manage database connections and analyze schemas
  - name: Answers
    description: Natural language question processing and answer generation
  - name: Semantic Layer
    description: |
      Manage your semantic layer to define how data is understood. The semantic layer 
      translates between database schemas and business concepts, enabling more accurate 
      natural language querying.
  - name: Chain Management
    description: Operations for managing conversation chains
  - name: Admin - Client Management
    description: Operations for managing clients
  - name: Admin - User Management
    description: Operations for managing client users