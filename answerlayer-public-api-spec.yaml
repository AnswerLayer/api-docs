openapi: 3.0.3
info:
  title: AnswerLayer Public API
  description: |
    ## Conversational Analytics Platform
    
    AnswerLayer enables organizations to embed conversational analytics directly into their existing product dashboards. 
    This API allows you to programmatically manage your clients and their users, while providing natural language querying 
    capabilities over your centralized data warehouse.
    
    ### Architecture
    
    The API follows a hierarchical structure designed for embedding analytics into your product:
    
    ```
    Your Organization (API Customer)
    ├── Database Connections (Your Data Warehouse)
    ├── Semantic Layer (How Data is Understood)
    ├── Clients (Your Customers)
    │   ├── Users (Individuals using your product)
    │   ├── Answers & Chains of Answers (Auto-scoped to client data)
    │   └── Charts & Visualizations
    └── API Keys & Authentication
    ```

    ### Semantic Layer
    
    The semantic layer translates between your database schema and business concepts, enabling more accurate and 
    consistent natural language querying. It defines:
    - **Entities**: Core business objects (customers, orders, products)
    - **Relationships**: How entities connect
    - **Dimensions**: How to group and segment data
    - **Measures**: What to count or sum
    - **Metrics**: Calculated business KPIs
    - **Filters**: Common data scoping rules

    ### Privacy

    AnswerLayer is PII-aware and will never store or access any PII data. 
    It intelligently detects which columns contain sensitive data and protects them at the source, never allowing sensitive data to leave your systems.
    
    ### Use Case Example
    
    Use AnswerLayer to:
    1. Connect your data warehouse containing all client data
    2. Generate or define a semantic layer to describe your data model
    3. Register client records for each customer  
    4. Embed conversational analytics into your customer dashboard
    5. Allow each customer to ask questions about their own usage data
    
    AnswerLayer automatically ensures data isolation - each client only sees their own data.
    
    ### Authentication
    
    All API requests require authentication using API keys. Include your API key in the `Authorization` header:
    
    ```
    Authorization: Bearer YOUR_API_KEY
    ```
  
    ### Error Handling
    
    The API uses standard HTTP status codes and returns JSON error responses:
    
    ```json
    {
      "error": {
        "code": "VALIDATION_ERROR",
        "message": "Invalid client_id provided",
        "details": "Client with ID 'client_abc123' not found"
      }
    }
    ```

  version: 1.0.0
  contact:
    name: AnswerLayer API Support
    email: josh@getanswerlayer.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://developers.getanswerlayer.com/v1
    description: Production server

security:
  - ApiKeyAuth: []

paths:
  # Semantic Layer Management
  /semantic-layers/generate:
    post:
      summary: Generate semantic layer from schema
      description: |
        Automatically generate a semantic layer by analyzing your database schema. 
        Uses AI to identify entities, relationships, and suggest meaningful metrics based on your data structure.
      operationId: generateSemanticLayer
      tags:
        - Semantic Layer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateSemanticLayerRequest'
            examples:
              basic:
                summary: Basic generation
                value:
                  connection_id: "conn_123"
                  options:
                    auto_discover_metrics: true
                    include_common_filters: true
              with_hints:
                summary: Generation with business context
                value:
                  connection_id: "conn_123"
                  options:
                    auto_discover_metrics: true
                    include_common_filters: true
                    industry: "e-commerce"
                    key_metrics: ["revenue", "customer_retention"]
      responses:
        '201':
          description: Semantic layer generated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenerateSemanticLayerResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /semantic-layers:
    post:
      summary: Create or update semantic layer
      description: |
        Create a new semantic layer or update the existing one. 
        The semantic layer defines how your data model maps to business concepts.
      operationId: createSemanticLayer
      tags:
        - Semantic Layer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSemanticLayerRequest'
      responses:
        '201':
          description: Semantic layer created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SemanticLayer'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
    
    get:
      summary: List semantic layer versions
      description: Retrieve all versions of your semantic layer
      operationId: listSemanticLayers
      tags:
        - Semantic Layer
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: limit
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            default: 20
            maximum: 100
      responses:
        '200':
          description: List of semantic layer versions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SemanticLayerList'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /semantic-layers/current:
    get:
      summary: Get current semantic layer
      description: Retrieve the currently active semantic layer
      operationId: getCurrentSemanticLayer
      tags:
        - Semantic Layer
      responses:
        '200':
          description: Current semantic layer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SemanticLayer'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /semantic-layers/test:
    post:
      summary: Test semantic layer
      description: |
        Test your semantic layer with sample questions to ensure it correctly 
        interprets natural language queries and generates appropriate SQL.
      operationId: testSemanticLayer
      tags:
        - Semantic Layer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestSemanticLayerRequest'
      responses:
        '200':
          description: Test results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestSemanticLayerResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  # Connection Management
  /connections:
    get:
      summary: List database connections
      description: List all configured database connections
      operationId: listConnections
      tags:
        - Connections
      responses:
        '200':
          description: List of connections
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectionList'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /connections/{connection_id}/analyze:
    post:
      summary: Analyze database schema
      description: |
        Analyze a database connection to understand its schema, relationships, 
        and data patterns. Used for semantic layer generation.
      operationId: analyzeSchema
      tags:
        - Connections
      parameters:
        - name: connection_id
          in: path
          required: true
          description: Database connection ID
          schema:
            type: string
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnalyzeSchemaRequest'
      responses:
        '200':
          description: Schema analysis results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaAnalysis'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  # Admin Endpoints - Client Management
  /admin/clients:
    post:
      summary: Create new client
      description: Create a new client organization that can access analytics through your product
      operationId: createClient
      tags:
        - Admin - Client Management
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateClientRequest'
      responses:
        '201':
          description: Client created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409':
          $ref: '#/components/responses/Conflict'
    
    get:
      summary: List all clients
      description: Retrieve a paginated list of all clients in your organization
      operationId: listClients
      tags:
        - Admin - Client Management
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: limit
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            default: 20
            maximum: 100
        - name: search
          in: query
          description: Search clients by name or domain
          required: false
          schema:
            type: string
      responses:
        '200':
          description: List of clients
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientList'
        '401':
          $ref: '#/components/responses/Unauthorized'
  
  /admin/clients/{client_id}:
    get:
      summary: Get client details
      description: Retrieve detailed information about a specific client
      operationId: getClient
      tags:
        - Admin - Client Management
      parameters:
        - name: client_id
          in: path
          required: true
          description: Unique identifier for the client
          schema:
            type: string
      responses:
        '200':
          description: Client details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    
    put:
      summary: Update client
      description: Update an existing client's information
      operationId: updateClient
      tags:
        - Admin - Client Management
      parameters:
        - name: client_id
          in: path
          required: true
          description: Unique identifier for the client
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateClientRequest'
      responses:
        '200':
          description: Client updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    
    delete:
      summary: Delete client
      description: Delete a client and all associated data
      operationId: deleteClient
      tags:
        - Admin - Client Management
      parameters:
        - name: client_id
          in: path
          required: true
          description: Unique identifier for the client
          schema:
            type: string
      responses:
        '204':
          description: Client deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  # Admin Endpoints - User Management
  /admin/clients/{client_id}/users:
    post:
      summary: Create client user
      description: Create a new user for a specific client organization
      operationId: createClientUser
      tags:
        - Admin - User Management
      parameters:
        - name: client_id
          in: path
          required: true
          description: Unique identifier for the client
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateClientUserRequest'
      responses:
        '201':
          description: Client user created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientUser'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    
    get:
      summary: List client users
      description: Retrieve all users for a specific client organization
      operationId: listClientUsers
      tags:
        - Admin - User Management
      parameters:
        - name: client_id
          in: path
          required: true
          description: Unique identifier for the client
          schema:
            type: string
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: List of client users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientUserList'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /admin/clients/{client_id}/users/{user_id}:
    get:
      summary: Get client user details
      description: Retrieve detailed information about a specific client user
      operationId: getClientUser
      tags:
        - Admin - User Management
      parameters:
        - name: client_id
          in: path
          required: true
          description: Unique identifier for the client
          schema:
            type: string
        - name: user_id
          in: path
          required: true
          description: Unique identifier for the user
          schema:
            type: string
      responses:
        '200':
          description: Client user details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientUser'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    
    put:
      summary: Update client user
      description: Update an existing client user's information
      operationId: updateClientUser
      tags:
        - Admin - User Management
      parameters:
        - name: client_id
          in: path
          required: true
          description: Unique identifier for the client
          schema:
            type: string
        - name: user_id
          in: path
          required: true
          description: Unique identifier for the user
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateClientUserRequest'
      responses:
        '200':
          description: Client user updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientUser'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    
    delete:
      summary: Delete client user
      description: Delete a client user and all associated data
      operationId: deleteClientUser
      tags:
        - Admin - User Management
      parameters:
        - name: client_id
          in: path
          required: true
          description: Unique identifier for the client
          schema:
            type: string
        - name: user_id
          in: path
          required: true
          description: Unique identifier for the user
          schema:
            type: string
      responses:
        '204':
          description: Client user deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  # Answer Endpoints
  /answer:
    post:
      summary: Get answer
      description: |
        Get an answer to a natural language question. The semantic layer is automatically 
        applied to improve query accuracy and ensure proper data scoping.
      operationId: getAnswer
      tags:
        - Answers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetAnswerRequest'
            examples:
              new_answer:
                summary: Start new conversation
                value:
                  question: "Why did our costs increase last quarter?"
                  client_id: "client_123"
                  user_id: "user_456"
                  context:
                    timezone: "America/New_York"
              follow_up:
                summary: Follow-up question
                value:
                  question: "Show me the monthly breakdown for those products"
                  client_id: "client_123"
                  user_id: "user_456"
                  chain_id: "chain_789"
              with_options:
                summary: With execution options
                value:
                  question: "What's our revenue this month?"
                  client_id: "client_123"
                  user_id: "user_456"
                  options:
                    include_sql: true
                    include_semantic_trace: true
      responses:
        '201':
          description: Answer processed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Answer'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '429':
          $ref: '#/components/responses/RateLimitExceeded'

  /answer/{answer_id}/chart:
    post:
      summary: Request chart
      description: Generate a chart visualization for a specific answer
      operationId: requestChart
      tags:
        - Answers
      parameters:
        - name: answer_id
          in: path
          required: true
          description: Unique identifier for the question/answer
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestChartRequest'
      responses:
        '200':
          description: Chart generated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Chart'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /answer/{answer_id}/suggestions:
    get:
      summary: Get follow-up suggestions
      description: Retrieve suggested follow-up questions for a given answer
      operationId: getFollowUpSuggestions
      tags:
        - Answers
      parameters:
        - name: answer_id
          in: path
          required: true
          description: Unique identifier for the question/answer
          schema:
            type: string
        - name: limit
          in: query
          description: Number of suggestions to return
          required: false
          schema:
            type: integer
            default: 5
            maximum: 10
      responses:
        '200':
          description: Follow-up suggestions retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FollowUpSuggestions'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  # Chain Management
  /chains:
    get:
      summary: List chains for client user
      description: Retrieve a list of conversation chains for a specific client user
      operationId: listChains
      tags:
        - Chain Management
      parameters:
        - name: client_id
          in: query
          required: true
          description: Unique identifier for the client
          schema:
            type: string
        - name: user_id
          in: query
          required: true
          description: Unique identifier for the user
          schema:
            type: string
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: limit
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
      responses:
        '200':
          description: List of chains
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChainList'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /chains/{chain_id}:
    get:
      summary: Get chain details
      description: Retrieve detailed information about a specific chain
      operationId: getChain
      tags:
        - Chain Management
      parameters:
        - name: chain_id
          in: path
          required: true
          description: Unique identifier for the chain
          schema:
            type: string
      responses:
        '200':
          description: Chain details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Chain'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /chains/{chain_id}/answers:
    get:
      summary: List answers for chain
      description: Retrieve all answers in a specific chain
      operationId: listAnswersForChain
      tags:
        - Chain Management
      parameters:
        - name: chain_id
          in: path
          required: true
          description: Unique identifier for the chain
          schema:
            type: string
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: List of answers in the chain
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnswerList'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  # Analytics Endpoints
  /analytics/semantic-usage:
    get:
      summary: Get semantic layer usage statistics
      description: |
        Analyze how your semantic layer is being used. Helps identify popular metrics,
        unused objects, and common question patterns to improve your semantic model.
      operationId: getSemanticUsage
      tags:
        - Analytics
      parameters:
        - name: start_date
          in: query
          description: Start date for analysis period (ISO 8601)
          required: true
          schema:
            type: string
            format: date
            example: "2024-01-01"
        - name: end_date
          in: query
          description: End date for analysis period (ISO 8601)
          required: true
          schema:
            type: string
            format: date
            example: "2024-01-31"
        - name: group_by
          in: query
          description: Time grouping for metrics
          required: false
          schema:
            type: string
            enum: ["day", "week", "month"]
            default: "day"
      responses:
        '200':
          description: Semantic usage statistics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SemanticUsageStats'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /analytics/failed-queries:
    get:
      summary: Get failed queries
      description: |
        Retrieve queries that failed to execute or returned no results. 
        Use this to identify gaps in your semantic layer and improve coverage.
      operationId: getFailedQueries
      tags:
        - Analytics
      parameters:
        - name: start_date
          in: query
          description: Start date for analysis period (ISO 8601)
          required: true
          schema:
            type: string
            format: date
        - name: end_date
          in: query
          description: End date for analysis period (ISO 8601)
          required: true
          schema:
            type: string
            format: date
        - name: limit
          in: query
          description: Maximum number of failed queries to return
          required: false
          schema:
            type: integer
            default: 50
            minimum: 1
            maximum: 200
      responses:
        '200':
          description: Failed query analysis
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailedQueries'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

components:
  securitySchemes:
    ApiKeyAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: API key authentication. Include your API key in the Authorization header as a Bearer token.

  schemas:
    # Semantic Layer Schemas
    SemanticLayerDefinition:
      type: object
      description: Complete semantic layer definition
      properties:
        entities:
          type: array
          items:
            $ref: '#/components/schemas/Entity'
        relationships:
          type: array
          items:
            $ref: '#/components/schemas/Relationship'
        filters:
          type: array
          items:
            $ref: '#/components/schemas/Filter'
        dimensions:
          type: array
          items:
            $ref: '#/components/schemas/Dimension'
        measures:
          type: array
          items:
            $ref: '#/components/schemas/Measure'
        metrics:
          type: array
          items:
            $ref: '#/components/schemas/Metric'

    Entity:
      type: object
      required:
        - name
        - source_table
        - identifier
      properties:
        name:
          type: string
          description: Business-friendly name for the entity
          example: "customer"
        source_table:
          type: string
          description: Database table name
          example: "users"
        identifier:
          type: string
          description: Primary key column
          example: "user_id"
        temporal_key:
          type: string
          description: Optional timestamp column for event entities
          example: "created_at"
        description:
          type: string
          description: Human-readable description
          example: "Customer master data"

    Relationship:
      type: object
      required:
        - name
        - from_entity
        - to_entity
        - join_keys
      properties:
        name:
          type: string
          example: "customer_placed_order"
        from_entity:
          type: string
          example: "customer"
        to_entity:
          type: string
          example: "order"
        join_keys:
          type: object
          properties:
            from:
              type: string
              example: "user_id"
            to:
              type: string
              example: "customer_id"
        cardinality:
          type: string
          enum: ["one_to_one", "one_to_many", "many_to_many"]
          example: "one_to_many"

    Filter:
      type: object
      required:
        - name
        - entity
        - condition
      properties:
        name:
          type: string
          example: "completed_orders"
        entity:
          type: string
          example: "order"
        condition:
          type: string
          description: SQL condition
          example: "status = 'completed'"
        parameters:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              type:
                type: string
                enum: ["string", "number", "date", "boolean"]
              default:
                type: string
        description:
          type: string

    Dimension:
      type: object
      required:
        - name
        - entity
        - expression
      properties:
        name:
          type: string
          example: "customer_segment"
        entity:
          type: string
          example: "customer"
        expression:
          type: string
          description: SQL expression
          example: "CASE WHEN lifetime_value > 1000 THEN 'high_value' ELSE 'standard' END"
        description:
          type: string

    Measure:
      type: object
      required:
        - name
        - expression
        - aggregation
        - entity
      properties:
        name:
          type: string
          example: "revenue"
        expression:
          type: string
          example: "SUM(order_total)"
        aggregation:
          type: string
          enum: ["sum", "count", "avg", "min", "max"]
        entity:
          type: string
          example: "order"
        default_filters:
          type: array
          items:
            type: string
          example: ["completed_orders"]
        description:
          type: string

    Metric:
      type: object
      required:
        - name
        - formula
      properties:
        name:
          type: string
          example: "average_order_value"
        formula:
          type: string
          description: Expression using measures
          example: "revenue / order_count"
        required_filters:
          type: array
          items:
            type: string
        recommended_filters:
          type: array
          items:
            type: string
        description:
          type: string
        example_questions:
          type: array
          items:
            type: string
          example: ["What's our average order value?", "How has AOV changed over time?"]

    GenerateSemanticLayerRequest:
      type: object
      required:
        - connection_id
      properties:
        connection_id:
          type: string
          description: Database connection to analyze
          example: "conn_123"
        options:
          type: object
          properties:
            auto_discover_metrics:
              type: boolean
              default: true
              description: Automatically suggest common metrics based on data patterns
            include_common_filters:
              type: boolean
              default: true
              description: Include standard time-based and status filters
            industry:
              type: string
              description: Industry context for better metric suggestions
              example: "e-commerce"
            key_metrics:
              type: array
              items:
                type: string
              description: Hint about important business metrics
              example: ["revenue", "customer_retention", "churn_rate"]
            tables:
              type: array
              items:
                type: string
              description: Specific tables to analyze (analyzes all if not specified)
              example: ["orders", "customers", "products"]

    GenerateSemanticLayerResponse:
      type: object
      properties:
        draft_id:
          type: string
          description: ID of the generated draft
          example: "draft_456"
        semantic_layer:
          $ref: '#/components/schemas/SemanticLayerDefinition'
        suggestions:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
                enum: ["metric", "dimension", "filter"]
              name:
                type: string
              reason:
                type: string
                example: "Common e-commerce metric based on your order data"
        generation_metadata:
          type: object
          properties:
            tables_analyzed:
              type: integer
            relationships_discovered:
              type: integer
            metrics_created:
              type: integer
            confidence_score:
              type: number
              description: 0-1 confidence in the generated model
              example: 0.85

    CreateSemanticLayerRequest:
      type: object
      required:
        - semantic_layer
      properties:
        semantic_layer:
          $ref: '#/components/schemas/SemanticLayerDefinition'
        validate:
          type: boolean
          default: true
          description: Validate against current database schema
        description:
          type: string
          description: Version description or change notes
          example: "Added customer segmentation dimensions"

    SemanticLayer:
      type: object
      properties:
        id:
          type: string
          example: "sl_789"
        version:
          type: integer
          example: 1
        status:
          type: string
          enum: ["draft", "active", "archived"]
          example: "active"
        semantic_layer:
          $ref: '#/components/schemas/SemanticLayerDefinition'
        validation_results:
          type: object
          properties:
            valid:
              type: boolean
            errors:
              type: array
              items:
                type: object
                properties:
                  type:
                    type: string
                    example: "invalid_reference"
                  message:
                    type: string
                    example: "Entity 'customer' references non-existent table 'users'"
                  location:
                    type: string
                    example: "entities[0].source_table"
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        created_by:
          type: string
          example: "user_admin"

    SemanticLayerList:
      type: object
      properties:
        versions:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              version:
                type: integer
              status:
                type: string
                enum: ["draft", "active", "archived"]
              description:
                type: string
              created_at:
                type: string
                format: date-time
              created_by:
                type: string
        pagination:
          $ref: '#/components/schemas/Pagination'

    TestSemanticLayerRequest:
      type: object
      required:
        - test_questions
      properties:
        semantic_layer_id:
          type: string
          description: ID of semantic layer to test (uses current if not specified)
          example: "sl_789"
        semantic_layer:
          $ref: '#/components/schemas/SemanticLayerDefinition'
          description: Inline semantic layer definition (alternative to ID)
        test_questions:
          type: array
          items:
            type: string
          minItems: 1
          maxItems: 20
          example: 
            - "What's our revenue this month?"
            - "Show me top customers by order count"
            - "What's the average order value by product category?"
        include_sql:
          type: boolean
          default: true
          description: Include generated SQL in results

    TestSemanticLayerResponse:
      type: object
      properties:
        results:
          type: array
          items:
            type: object
            properties:
              question:
                type: string
              status:
                type: string
                enum: ["success", "partial_success", "failure"]
              semantic_objects_used:
                type: array
                items:
                  type: string
                example: ["metric.revenue", "filter.current_month", "dimension.product_category"]
              generated_sql:
                type: string
                example: "SELECT SUM(order_total) as revenue FROM orders WHERE..."
              execution_time_ms:
                type: number
                example: 45
              error:
                type: string
                description: Error message if status is failure
              suggestions:
                type: array
                items:
                  type: string
                description: Suggestions for missing semantic objects
                example: ["Consider adding a 'current_month' filter for time-based queries"]
        summary:
          type: object
          properties:
            total_tests:
              type: integer
            successful:
              type: integer
            failed:
              type: integer
            coverage_percentage:
              type: number
              description: Percentage of semantic objects used in tests
              example: 75.5

    # Connection Schemas
    Connection:
      type: object
      properties:
        id:
          type: string
          example: "conn_123"
        name:
          type: string
          example: "Production Analytics DB"
        type:
          type: string
          enum: ["postgresql", "mysql", "snowflake", "bigquery", "redshift"]
          example: "postgresql"
        status:
          type: string
          enum: ["active", "inactive", "error"]
          example: "active"
        created_at:
          type: string
          format: date-time

    ConnectionList:
      type: object
      properties:
        connections:
          type: array
          items:
            $ref: '#/components/schemas/Connection'

    AnalyzeSchemaRequest:
      type: object
      properties:
        include_sample_data:
          type: boolean
          default: true
          description: Include sample values for columns
        sample_size:
          type: integer
          default: 100
          minimum: 10
          maximum: 1000
          description: Number of sample rows to analyze
        tables:
          type: array
          items:
            type: string
          description: Specific tables to analyze (all if not specified)

    SchemaAnalysis:
      type: object
      properties:
        tables:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
                example: "orders"
              columns:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    type:
                      type: string
                    is_primary_key:
                      type: boolean
                    is_foreign_key:
                      type: boolean
                    references:
                      type: string
                      example: "customers.id"
                    is_nullable:
                      type: boolean
                    sample_values:
                      type: array
                      items: {}
                    value_patterns:
                      type: object
                      properties:
                        min:
                          type: string
                        max:
                          type: string
                        unique_count:
                          type: integer
                        null_percentage:
                          type: number
                        distribution:
                          type: string
                          enum: ["uniform", "normal", "skewed_left", "skewed_right"]
              row_count:
                type: integer
              indexes:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    columns:
                      type: array
                      items:
                        type: string
                    type:
                      type: string
        recommendations:
          type: object
          properties:
            fact_tables:
              type: array
              items:
                type: string
              description: Tables that appear to be fact tables
            dimension_tables:
              type: array
              items:
                type: string
              description: Tables that appear to be dimensions
            suggested_relationships:
              type: array
              items:
                type: object
                properties:
                  from_table:
                    type: string
                  to_table:
                    type: string
                  join_key:
                    type: string
                  confidence:
                    type: number
            suggested_metrics:
              type: array
              items:
                type: object
                properties:
                  name:
                    type: string
                  based_on:
                    type: string
                    description: Column this metric is based on
                  aggregation:
                    type: string
                  reason:
                    type: string

    # Client Management Schemas
    CreateClientRequest:
      type: object
      required:
        - name
        - domain
      properties:
        name:
          type: string
          description: Display name for the client organization
          example: "Customer Analytics Dashboard"
        description:
          type: string
          description: Optional description of the client organization
          example: "Analytics dashboard for customer insights"
        domain:
          type: string
          description: Primary domain for the client organization
          example: "dashboard.acme.com"
        settings:
          type: object
          description: Client-specific configuration settings
          properties:
            max_users:
              type: integer
              description: Maximum number of users allowed for this client
              example: 100
            features:
              type: array
              items:
                type: string
              description: List of enabled features for this client
              example: ["analytics", "reporting", "charts"]

    UpdateClientRequest:
      type: object
      properties:
        name:
          type: string
          description: Display name for the client organization
        description:
          type: string
          description: Optional description of the client organization
        settings:
          type: object
          description: Client-specific configuration settings

    Client:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the client organization
          example: "client_123"
        name:
          type: string
          description: Display name for the client organization
          example: "Customer Analytics Dashboard"
        description:
          type: string
          description: Optional description of the client organization
          example: "Analytics dashboard for customer insights"
        domain:
          type: string
          description: Primary domain for the client organization
          example: "dashboard.acme.com"
        settings:
          type: object
          description: Client-specific configuration settings
        created_at:
          type: string
          format: date-time
          description: When the client organization was created
        updated_at:
          type: string
          format: date-time
          description: When the client organization was last updated
        user_count:
          type: integer
          description: Current number of users
          example: 25

    ClientList:
      type: object
      properties:
        clients:
          type: array
          items:
            $ref: '#/components/schemas/Client'
        pagination:
          $ref: '#/components/schemas/Pagination'

    # User Management Schemas
    CreateClientUserRequest:
      type: object
      required:
        - email
        - name
      properties:
        email:
          type: string
          format: email
          description: Email address for the user
          example: "john.doe@acme.com"
        name:
          type: string
          description: Full name of the user
          example: "John Doe"
        metadata:
          type: object
          description: Additional user metadata
          properties:
            department:
              type: string
              example: "Finance"
            title:
              type: string
              example: "Senior Analyst"

    UpdateClientUserRequest:
      type: object
      properties:
        name:
          type: string
          description: Full name of the user
        metadata:
          type: object
          description: Additional user metadata

    ClientUser:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the user
          example: "user_456"
        client_id:
          type: string
          description: ID of the client organization this user belongs to
          example: "client_123"
        email:
          type: string
          format: email
          description: Email address for the user
          example: "john.doe@acme.com"
        name:
          type: string
          description: Full name of the user
          example: "John Doe"
        metadata:
          type: object
          description: Additional user metadata
        created_at:
          type: string
          format: date-time
          description: When the user was created
        updated_at:
          type: string
          format: date-time
          description: When the user was last updated
        last_active:
          type: string
          format: date-time
          description: When the user was last active

    ClientUserList:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/ClientUser'
        pagination:
          $ref: '#/components/schemas/Pagination'

    # Question & Answer Schemas
    GetAnswerRequest:
      type: object
      required:
        - question
        - client_id
        - user_id
      properties:
        question:
          type: string
          description: Natural language question to ask
          example: "What were our top 5 products by revenue last quarter?"
        client_id:
          type: string
          description: ID of the client organization asking the question
          example: "client_123"
        user_id:
          type: string
          description: ID of the user asking the question
          example: "user_456"
        chain_id:
          type: string
          description: Optional chain ID for follow-up questions
          example: "chain_789"
        context:
          type: object
          description: Additional context for the question
          properties:
            timezone:
              type: string
              description: User's timezone for date calculations
              example: "America/New_York"
            fiscal_calendar:
              type: object
              properties:
                fiscal_year_start:
                  type: string
                  description: Start of fiscal year (MM-DD)
                  example: "02-01"
            page_context:
              type: object
              description: Context about where the user is in your application
        options:
          type: object
          description: Execution options
          properties:
            include_sql:
              type: boolean
              default: false
              description: Include generated SQL in response
            include_semantic_trace:
              type: boolean
              default: false
              description: Include semantic objects used
            dry_run:
              type: boolean
              default: false
              description: Generate SQL without executing
            max_rows:
              type: integer
              default: 1000
              description: Maximum rows to return

    Answer:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the answer
          example: "answer_abc123"
        chain_id:
          type: string
          description: ID of the conversation chain
          example: "chain_789"
        question:
          type: string
          description: The original question
          example: "What were our top 5 products by revenue last quarter?"
        answer:
          type: string
          description: Natural language answer
          example: "Based on your Q3 2024 data, here are the top 5 products by revenue..."
        sql_query:
          type: string
          description: SQL query that was executed (if include_sql was true)
          example: "SELECT product_name, SUM(revenue) as total_revenue FROM sales WHERE quarter = 'Q3' AND year = 2024 GROUP BY product_name ORDER BY total_revenue DESC LIMIT 5"
        data:
          type: object
          description: Raw data results
          properties:
            columns:
              type: array
              items:
                type: string
              example: ["product_name", "total_revenue"]
            rows:
              type: array
              items:
                type: array
              example: [["Widget A", 125000], ["Widget B", 98000], ["Widget C", 87000]]
        semantic_trace:
          type: object
          description: Semantic objects used (if include_semantic_trace was true)
          properties:
            metrics_used:
              type: array
              items:
                type: string
              example: ["revenue"]
            dimensions_used:
              type: array
              items:
                type: string
              example: ["product_name"]
            filters_applied:
              type: array
              items:
                type: string
              example: ["last_quarter", "completed_orders"]
            semantic_layer_version:
              type: integer
              example: 1
        metadata:
          type: object
          description: Additional metadata about the answer
          properties:
            execution_time_ms:
              type: number
              description: Query execution time in milliseconds
              example: 245
            rows_scanned:
              type: integer
              description: Number of rows scanned
              example: 50000
            cache_hit:
              type: boolean
              description: Whether results were served from cache
              example: false
        created_at:
          type: string
          format: date-time
          description: When the answer was created
        client_id:
          type: string
          description: ID of the client organization
          example: "client_123"
        user_id:
          type: string
          description: ID of the user who asked the question
          example: "user_456"

    RequestChartRequest:
      type: object
      required:
        - chart_type
      properties:
        chart_type:
          type: string
          enum: ["bar", "line", "pie", "scatter", "bubble", "auto"]
          description: Type of chart to generate
          example: "bar"
        title:
          type: string
          description: Optional title for the chart
          example: "Top Products by Revenue"
        options:
          type: object
          description: Chart-specific options
          properties:
            color_scheme:
              type: string
              description: Color scheme for the chart
              example: "default"
            show_legend:
              type: boolean
              description: Whether to show legend
              example: true

    Chart:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the chart
          example: "chart_xyz789"
        answer_id:
          type: string
          description: ID of the associated answer
          example: "answer_abc123"
        chart_type:
          type: string
          description: Type of chart
          example: "bar"
        title:
          type: string
          description: Chart title
          example: "Top Products by Revenue"
        config:
          type: object
          description: Chart configuration
          properties:
            data:
              type: object
              description: Chart data configuration
            options:
              type: object
              description: Chart display options
        created_at:
          type: string
          format: date-time
          description: When the chart was created

    FollowUpSuggestions:
      type: object
      properties:
        suggestions:
          type: array
          items:
            type: object
            properties:
              question:
                type: string
                description: Suggested follow-up question
                example: "Show me the monthly breakdown for these products"
              confidence:
                type: number
                description: Confidence score for the suggestion
                example: 0.85
              category:
                type: string
                description: Category of the suggestion
                example: "drill_down"

    # Chain Management Schemas
    Chain:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the chain
          example: "chain_789"
        client_id:
          type: string
          description: ID of the client organization
          example: "client_123"
        user_id:
          type: string
          description: ID of the user who started the chain
          example: "user_456"
        title:
          type: string
          description: Title of the conversation chain
          example: "Q3 Revenue Analysis"
        answer_count:
          type: integer
          description: Number of answers in the chain
          example: 5
        created_at:
          type: string
          format: date-time
          description: When the chain was created
        updated_at:
          type: string
          format: date-time
          description: When the chain was last updated

    ChainList:
      type: object
      properties:
        chains:
          type: array
          items:
            $ref: '#/components/schemas/Chain'
        pagination:
          $ref: '#/components/schemas/Pagination'

    AnswerList:
      type: object
      properties:
        answers:
          type: array
          items:
            $ref: '#/components/schemas/Answer'
        pagination:
          $ref: '#/components/schemas/Pagination'

    # Analytics Schemas
    SemanticUsageStats:
      type: object
      properties:
        period:
          type: object
          properties:
            start:
              type: string
              format: date
            end:
              type: string
              format: date
        usage:
          type: object
          properties:
            total_questions:
              type: integer
              example: 1523
            unique_users:
              type: integer
              example: 47
            unique_clients:
              type: integer
              example: 12
            avg_response_time_ms:
              type: number
              example: 312
        popular_metrics:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              usage_count:
                type: integer
              percentage_of_queries:
                type: number
        popular_dimensions:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              usage_count:
                type: integer
        unused_objects:
          type: array
          description: Semantic objects that haven't been used
          items:
            type: object
            properties:
              type:
                type: string
                enum: ["entity", "metric", "dimension", "filter"]
              name:
                type: string
              last_used:
                type: string
                format: date-time
                nullable: true
        common_question_patterns:
          type: array
          items:
            type: object
            properties:
              pattern:
                type: string
                example: "revenue by {dimension}"
              count:
                type: integer
              example_questions:
                type: array
                items:
                  type: string

    FailedQueries:
      type: object
      properties:
        failed_queries:
          type: array
          items:
            type: object
            properties:
              question:
                type: string
                example: "What's our churn rate?"
              error:
                type: string
                example: "No metric found for 'churn rate'"
              error_type:
                type: string
                enum: ["missing_semantic_object", "invalid_syntax", "permission_denied", "execution_error"]
              timestamp:
                type: string
                format: date-time
              client_id:
                type: string
              user_id:
                type: string
              suggested_fix:
                type: object
                description: AI-suggested solution
                properties:
                  type:
                    type: string
                    enum: ["add_metric", "add_dimension", "add_filter", "modify_existing"]
                  suggestion:
                    type: object
                    example:
                      name: "churn_rate"
                      formula: "customers_lost / customers_start_of_period"
                      description: "Percentage of customers who stopped using the service"
        summary:
          type: object
          properties:
            total_failed:
              type: integer
            by_error_type:
              type: object
              additionalProperties:
                type: integer
            most_common_missing_concepts:
              type: array
              items:
                type: string

    # Common Schemas
    Pagination:
      type: object
      properties:
        page:
          type: integer
          description: Current page number
          example: 1
        limit:
          type: integer
          description: Number of items per page
          example: 20
        total:
          type: integer
          description: Total number of items
          example: 150
        total_pages:
          type: integer
          description: Total number of pages
          example: 8
        has_next:
          type: boolean
          description: Whether there are more pages
          example: true
        has_previous:
          type: boolean
          description: Whether there are previous pages
          example: false

    Error:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: string
              description: Error code
              example: "VALIDATION_ERROR"
            message:
              type: string
              description: Human-readable error message
              example: "Invalid client_id provided"
            details:
              type: string
              description: Additional error details
              example: "Client with ID 'abc123' not found"
            request_id:
              type: string
              description: Unique request identifier for debugging
              example: "req_123456789"

  responses:
    BadRequest:
      description: Bad request - Invalid input parameters
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error:
              code: "VALIDATION_ERROR"
              message: "Invalid input parameters"
              details: "The 'client_id' field is required"

    Unauthorized:
      description: Unauthorized - Invalid or missing API key
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error:
              code: "UNAUTHORIZED"
              message: "Invalid API key"
              details: "Please provide a valid API key in the Authorization header"

    Forbidden:
      description: Forbidden - Insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error:
              code: "FORBIDDEN"
              message: "Insufficient permissions"
              details: "You don't have permission to access this resource"

    NotFound:
      description: Not found - Resource doesn't exist
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error:
              code: "NOT_FOUND"
              message: "Resource not found"
              details: "The requested resource could not be found"

    Conflict:
      description: Conflict - Resource already exists
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error:
              code: "CONFLICT"
              message: "Resource already exists"
              details: "A client with this domain already exists"

    RateLimitExceeded:
      description: Rate limit exceeded
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error:
              code: "RATE_LIMIT_EXCEEDED"
              message: "Rate limit exceeded"
              details: "You have exceeded the rate limit. Please try again later"

tags:
  - name: Semantic Layer
    description: |
      Manage your semantic layer to define how data is understood. The semantic layer 
      translates between database schemas and business concepts, enabling more accurate 
      natural language querying.
  - name: Connections
    description: Manage database connections and analyze schemas
  - name: Answers
    description: Natural language question processing and answer generation
  - name: Chain Management
    description: Operations for managing conversation chains
  - name: Analytics
    description: Usage analytics and query performance insights
  - name: Admin - Client Management
    description: Operations for managing clients
  - name: Admin - User Management
    description: Operations for managing client users